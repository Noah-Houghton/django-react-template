"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from configurations import Configuration, values
import environ

environ.Env.read_env(env_file="config/.env")


class LocalConfiguration(Configuration):
    @classmethod
    def setup(cls):
        """Configure settings that come from the environment."""
        super().setup()
        cls.DEBUG_TOOLBAR = values.BooleanValue(cls.DEBUG_TOOLBAR, environ_prefix=None).setup(
            "DEBUG_TOOLBAR"
        )
        cls.TEMPLATE_DEBUG = values.BooleanValue(cls.DEBUG, environ_prefix=None).setup(
            "TEMPLATE_DEBUG"
        )
        cls.WEBPACK_LOADER_HOTLOAD = values.BooleanValue(
            cls.DEBUG, environ_prefix=None
        ).setup("WEBPACK_LOADER_HOTLOAD")
        if cls.DEBUG:
            cls.ALLOWED_HOSTS = ["*"]
            cls.AUTH_PASSWORD_VALIDATORS = []
            cls.CSRF_COOKIE_SECURE = False
            cls.SESSION_COOKIE_SECURE = False
            if cls.DEBUG_TOOLBAR:
                cls.INTERNAL_IPS = ["127.0.0.1"]
                cls.INSTALLED_APPS.append("debug_toolbar")
                cls.MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
        if values.BooleanValue(False).setup("LOG"):
            cls.LOGGING = {
                'version': 1,
                'disable_existing_loggers': False,
                'handlers': {
                    'file': {
                        'level': 'DEBUG',
                        'class': 'logging.FileHandler',
                        'filename': '/tmp/debug.log',
                    },
                },
                'loggers': {
                    'django': {
                        'handlers': ['file'],
                        'level': 'DEBUG',
                        'propagate': True,
                    },
                },
            }
        if cls.WEBPACK_LOADER_HOTLOAD:
            cls.WEBPACK_LOADER = {'DEFAULT': {
                'LOADER_CLASS': "config.webpack_loader.DynamicWebpackLoader"
            }}

    # SECRET_KEY = values.Value(environ_required=True, environ_prefix=None)
    SECRET_KEY = os.getenv('SECRET_KEY')
    DEBUG = values.BooleanValue(False, environ_prefix=None)
    DEBUG_TOOLBAR = values.BooleanValue(False, environ_prefix=None)
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    WEBPACK_LOADER = {
        'DEFAULT': {
            'CACHE': not DEBUG,
            'BUNDLE_DIR_NAME': 'webpack_bundles/',  # must end with slash
            'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
            'POLL_INTERVAL': 0.1,
            'TIMEOUT': None,
            'IGNORE': [r'.+\.hot-update.js', r'.+\.map'],
            'LOADER_CLASS': 'webpack_loader.loader.WebpackLoader',
        }
    }

    AUTH_USER_MODEL = 'project.User'

    LOGIN_URL = '/login'

    # ALLOWED_HOSTS = values.ListValue(environ_required=True, environ_prefix=None)
    ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS')

    # Application definition

    INSTALLED_APPS = [
        'project.apps.ProjectConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'django_extensions',
        'django_react_components',
        'webpack_loader',
    ]

    MIDDLEWARE = [
        "whitenoise.middleware.WhiteNoiseMiddleware",
        'django.middleware.security.SecurityMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'config.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'config.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.1/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3')
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.1/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    @property
    def MEDIA_ROOT(self):
        return os.path.join(self.BASE_DIR, "media")

    MEDIA_URL = "/media/"  # For loading user uploaded media

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.1/howto/static-files/

    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATIC_URL = "/static/"
    STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
